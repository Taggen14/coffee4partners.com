generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Product {
  id                    String        @id @default(cuid())
  name                  String
  vendor                String
  tagline               String?
  description           String[]
  productAttributes     String[]
  productSpecifications String[]
  price                 Decimal       @db.Decimal(10, 2)
  images                String[]
  stock                 Int
  status                ProductStatus @default(ACTIVE)
  createdAt             DateTime      @default(now())
  updatedAt             DateTime      @updatedAt

  // Dynamic categorization
  categoryId    String
  category      Category     @relation(fields: [categoryId], references: [id])
  subCategoryId String?
  subCategory   SubCategory? @relation(fields: [subCategoryId, categoryId], references: [id, categoryId])

  // Relations
  orderItems OrderItem[]
  cartItems  CartItem[]
  returnItem ReturnItem[]
}

enum ProductStatus {
  ACTIVE
  DRAFT
  ARCHIVE
}

model Category {
  id            String        @id @default(cuid())
  name          String        @unique
  description   String?
  images        String[]
  subCategories SubCategory[]
  products      Product[]
}

model SubCategory {
  id          String    @id @default(cuid())
  name        String
  description String?
  images      String[]
  products    Product[]
  categoryId  String
  category    Category  @relation(fields: [categoryId], references: [id])

  @@unique([id, categoryId])
  @@unique([name, categoryId])
}

model NewsletterSubscriber {
  id        String   @id @default(cuid())
  email     String   @unique
  createdAt DateTime @default(now())
}

model Order {
  id              String      @id @default(cuid())
  status          OrderStatus
  customerEmail   String
  customerName    String
  shippingAddress String
  totalAmount     Decimal     @db.Decimal(10, 2)
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  orderItems OrderItem[]
  returns    Return[]
}

model OrderItem {
  id        String  @id @default(cuid())
  quantity  Int
  unitPrice Decimal @db.Decimal(10, 2)

  order     Order   @relation(fields: [orderId], references: [id])
  orderId   String
  product   Product @relation(fields: [productId], references: [id])
  productId String
}

enum OrderStatus {
  PENDING
  PAID
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  RETURNED
  REFUNDED
}

enum ReturnStatus {
  REQUESTED
  APPROVED
  REJECTED
  RECEIVED
  REFUNDED
}

model Return {
  id          String       @id @default(cuid())
  orderId     String
  order       Order        @relation(fields: [orderId], references: [id])
  status      ReturnStatus
  reason      String
  description String?
  items       ReturnItem[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model ReturnItem {
  id        String  @id @default(cuid())
  returnId  String
  return    Return  @relation(fields: [returnId], references: [id])
  productId String
  product   Product @relation(fields: [productId], references: [id])
  quantity  Int
  reason    String?
}

model Cart {
  id        String     @id @default(cuid())
  sessionId String     @unique
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  items     CartItem[]
}

model CartItem {
  id        String  @id @default(cuid())
  quantity  Int
  cart      Cart    @relation(fields: [cartId], references: [id])
  cartId    String
  product   Product @relation(fields: [productId], references: [id])
  productId String

  @@unique([cartId, productId])
}
